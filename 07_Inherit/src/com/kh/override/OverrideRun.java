package com.kh.override;

public class OverrideRun {

	public static void main(String[] args) {
		Book b = new Book("헝거게임", "수잔 콜린스");
		System.out.println(b.toString());
		/*
		 * 참조변수를 호출하면 자동으로 .toString()이 호출된다.
		 * 
		 * 오버라이딩 전 : Object 클래스의 toString() 실행 => 풀클래스명 + @ + 객체의 해쉬코드 16진수값
		 * // 참조변수의 주소값을 보여주는 .toString() => Object 클래스에서 무조건 상속 받게 되어있음
		 * 오버라이딩 후 : Book 클래스의 toString() 실행 => 해당 객체가 가지고 있는 모든 필드 값을 한 문자열로 반환
		 */
		
		/*
		 * #오버라이딩
		 * -> 자식 클래스가 상속 받고 있는 부모 클래스의 메소드를 재정의(재작성) 하는 것
		 * -> 부모가 제공하는 메소드를 자식이 일부 고쳐서 사용하겠다는 의미
		 *    자식 객체를 통해 실행 시 자식 메소드가 우선권을 가짐
		 *    
		 * #오버라이딩 성립 조건
		 * -> 부모 메소드 명과 동일 // 덮어쓴다는 개념
		 * -> 매개변수 개수, 자료형, 순서 동일해야 함(매개변수 이름은 상관 없음)
		 *    // 오버로딩 상 똑같은 형이어야 오버라이딩 할 수 있음 => 다르면 아예 상관 없는 다른 메소드니까
		 * -> 부모 메소드의 반환형도 동일해야 함
		 * -> 부모 메소드의 접근제한자보다 범위가 같거나 커야함 // ex) 부모 것은 public, 내 것은 default일 경우 접근 못하게 막아버림 
		 *    // => 부모가 됐던 걸 안 되게 해버림, 상속은 그런 개념이 아니고 규칙을 그대로 이전 받는 개념, 규칙은 동일해야 하므로 같거나 커야함
		 *    ex) 부모 메소드의 접근제한자가 protected일 경우 오버라이딩 당하는 메소드의 접근제한자는 protected이거나 public이어야 한다.
		 *    
		 * => 규약의 개념이 들어가 있음
		 * 
		 * # @Override 어노테이션
		 * -> 생락 가능함, 크게 상관 없음(명시하지 않아도 됨)
		 * -> 어노테이션을 붙이는 이유
		 *    => 부모 메소드 명이나 매개변수가 수정될 경우 -> 찾아보기 쉬움
		 *    => 메소드가 오버라이딩 한 메소드라는 사실을 직관적으로 알 수 있음
		 *    
		 */
	}
}
